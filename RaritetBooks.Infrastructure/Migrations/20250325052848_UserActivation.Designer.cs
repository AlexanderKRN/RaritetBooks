// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RaritetBooks.Infrastructure.DbContexts;

#nullable disable

namespace RaritetBooks.Infrastructure.Migrations
{
    [DbContext(typeof(RaritetBooksWriteDbContext))]
    [Migration("20250325052848_UserActivation")]
    partial class UserActivation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RaritetBooks.Domain.Entities.PhotoProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_photos");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_photos_product_id");

                    b.ToTable("product_photos", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.PhotoSeller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("UserSellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_seller_id");

                    b.HasKey("Id")
                        .HasName("pk_seller_photos");

                    b.HasIndex("UserSellerId")
                        .HasDatabaseName("ix_seller_photos_user_seller_id");

                    b.ToTable("seller_photos", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserSellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_seller_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("UserSellerId")
                        .HasDatabaseName("ix_products_user_seller_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.SellerRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 3, 25, 5, 28, 47, 880, DateTimeKind.Unspecified).AddTicks(1151), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("registration_date");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "RaritetBooks.Domain.Entities.SellerRequest.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "RaritetBooks.Domain.Entities.SellerRequest.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Patronomic")
                                .HasColumnType("text")
                                .HasColumnName("patronomic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "RaritetBooks.Domain.Entities.SellerRequest.PhoneNumber#MobilePhone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "RaritetBooks.Domain.Entities.SellerRequest.Status#SellerRequestStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");
                        });

                    b.HasKey("Id")
                        .HasName("pk_seller_requests");

                    b.ToTable("seller_requests", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActivationLink")
                        .HasColumnType("text")
                        .HasColumnName("activation_link");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_activated");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("TelegramId")
                        .HasColumnType("text")
                        .HasColumnName("telegram_id");

                    b.Property<string>("WhatsAppId")
                        .HasColumnType("text")
                        .HasColumnName("whats_app_id");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "RaritetBooks.Domain.Entities.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Role", "RaritetBooks.Domain.Entities.User.Role#Role", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("role");

                            b1.Property<string[]>("Permissions")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasColumnName("permissions");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_admins");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserClient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserSeller", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 3, 25, 5, 28, 47, 873, DateTimeKind.Unspecified).AddTicks(88), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("registration_date");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "RaritetBooks.Domain.Entities.UserSeller.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Patronomic")
                                .HasColumnType("text")
                                .HasColumnName("patronomic");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PhoneNumber", "RaritetBooks.Domain.Entities.UserSeller.PhoneNumber#MobilePhone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("phone_number");
                        });

                    b.HasKey("Id")
                        .HasName("pk_sellers");

                    b.ToTable("sellers", (string)null);
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.PhotoProduct", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.Product", null)
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_photos_products_product_id");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.PhotoSeller", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.UserSeller", null)
                        .WithMany("Photos")
                        .HasForeignKey("UserSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seller_photos_sellers_user_seller_id");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.Product", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.UserSeller", null)
                        .WithMany("Products")
                        .HasForeignKey("UserSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_sellers_user_seller_id");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserAdmin", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("RaritetBooks.Domain.Entities.UserAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admins_users_id");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserClient", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("RaritetBooks.Domain.Entities.UserClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_users_id");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserSeller", b =>
                {
                    b.HasOne("RaritetBooks.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("RaritetBooks.Domain.Entities.UserSeller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sellers_users_id");

                    b.OwnsMany("RaritetBooks.Domain.ValueObjects.SocialContact", "SocialContacts", b1 =>
                        {
                            b1.Property<Guid>("UserSellerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Link")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Types")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserSellerId", "Id");

                            b1.ToTable("sellers");

                            b1.ToJson("social_contacts");

                            b1.WithOwner()
                                .HasForeignKey("UserSellerId")
                                .HasConstraintName("fk_sellers_sellers_user_seller_id");
                        });

                    b.Navigation("SocialContacts");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.Product", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("RaritetBooks.Domain.Entities.UserSeller", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
